#+TITLE: Emacs Configuration
#+AUTHOR: Vaibhav Kaushik
#+EMAIL: vaibhavkaushik@disroot.org
#+OPTIONS: toc:nil num:nil
* Personal Information
** Who am I?
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Vaibhav Kaushik"
        user-mail-address "vaibhavkaushik@gmail.com")
#+END_SRC
* Adding Melpa
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(setq package-enable-at-startup nil) ; To avoid initializing twice
(package-initialize)
#+END_SRC
* Backup
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC
* Custom Defaults
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq inhibit-splash-screen t
	initial-scratch-message nil
	x-select-enable-clipboard t
	ring-bell-function 'ignore)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (global-linum-mode 1)
  (savehist-mode 1)
  (show-paren-mode 1)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (add-to-list 'exec-path "~/.local/bin/") 
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-0") 'delete-window)
(global-set-key (kbd "C-1") 'delete-other-windows)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-c s c") 'org-update-actuals)
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)
(global-set-key (kbd "C-c I") 'irc)
#+END_SRC
* =use-package=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC
** Installed Packages
 #+BEGIN_SRC emacs-lisp
 (use-package dracula-theme
     :ensure t
     :config
     (load-theme 'dracula t))

 (use-package markdown-mode
   :ensure t
   :commands (markdown-mode gfm-mode)
   :mode (("README\\.md\\'" . gfm-mode)
          ("\\.md\\'" . markdown-mode)
          ("\\.markdown\\'" . markdown-mode))
   :init (setq markdown-command "multimarkdown"))
 (use-package org-journal
               :ensure t
	       :custom
	       (org-journal-dir "~/github/hacking-for-me/journal/")
	       (org-journal-file-format "%d.%m.%Y.org"))
 (add-to-list 'package-pinned-packages '(projectile . "melpa-stable") t)

 (add-to-list 'load-path "~/.emacs.d/elpa/projectile-1.0.0")
 (use-package projectile
  :ensure t
  :pin melpa-stable
  :config
  (define-key projectile-mode-map (kbd "s-,") 'projectile-command-map)
  (setq projectile-project-search-path '("~/github/"))
  (setq projectile-enable-caching t)
  (projectile-mode +1))
  
  (require 'auto-complete-config)
  (ac-config-default)
 #+END_SRC
* =Org-Mode=
#+BEGIN_SRC emacs-lisp
 (require 'org-bullets)
 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

 (require 'org-journal)

 (setq org-log-done t
       org-todo-keywords '((sequence "TODO" "IN_PROGRESS" "DONE")))

 (add-hook 'org-mode-hook
           (lambda ()
	     (flyspell-mode)))
#+END_SRC
** Scrum
 #+BEGIN_SRC emacs-lisp
 (defun org-update-actuals ()
   (interactive)
   (org-entry-put (point) "ACTUAL"
                  (format "%0.2f" (/ (org-clock-sum-current-item) 60.0))))

 (add-to-list 'load-path "~/.emacs.d/elpa/emacs-scrum")
 (require 'scrum)
 (define-skeleton insert-org-entry
       "Prompt for task, estimate and category"
       nil
       '(setq task  (skeleton-read "Task: "))
       '(setq estimate  (skeleton-read "Estimate: "))
       '(setq category (skeleton-read "Category: "))
       '(setq timestamp (format-time-string "%s"))
	task \n
       ":PROPERTIES:" \n
       ":ESTIMATED: " estimate \n
       ":ACTUAL:" \n
       ":OWNER: vaibhavk" \n
       ":ID: " category "." timestamp \n
       ":TASKID: " category "." timestamp \n
       ":END:")
 #+END_SRC

** Export Options =ox=
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/elpa/org-reveal")
 (require 'ox-reveal)
 #+END_SRC
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass[11pt]{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
